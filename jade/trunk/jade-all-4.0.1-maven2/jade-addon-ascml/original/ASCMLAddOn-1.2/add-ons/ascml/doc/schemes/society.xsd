<?xml version="1.0" encoding="UTF-8"?><!-- edited with XMLSpy v2005 U (http://www.xmlspy.com) by Alexander Scheibe (private) --><!-- edited with XMLSPY v2004 rel. 3 U (http://www.xmlspy.com) by tyr (odin) --><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">	<xs:element name="society">		<xs:annotation>			<xs:documentation>A society defines a multi-agent application. The enclosed scenarios represent different application configurations. The society contains a declaration part in which all agent types and enclosed sub-societies are defined.In addition to the type declaration, for each society several concrete instances, called scenarios, can be included in the society definition, whereby  a scenario contains startable elements (agents and sub-scenarios) and their dependencies. Each society has to provide at least one default scenario.</xs:documentation>			<xs:documentation>Open issues:- The service for using a remote launcher has to be specified.- The service for querying an agent's state (as defined in the "agent" dependency) has to be specified.- It is currently not possible to start a scenario more than once because the agent names have to be unique. Would this be useful?</xs:documentation>		</xs:annotation>		<xs:complexType>			<xs:sequence>				<xs:element name="imports" minOccurs="0">					<xs:annotation>						<xs:documentation>A list of import statements.</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:sequence>							<xs:element name="import" type="xs:string" minOccurs="0" maxOccurs="unbounded">								<xs:annotation>									<xs:documentation>Specifies an existing agent type, society or package to be used. Allows the usage of unqualified names in this document.</xs:documentation>								</xs:annotation>							</xs:element>						</xs:sequence>					</xs:complexType>				</xs:element>				<xs:element name="agenttypes" minOccurs="0">					<xs:annotation>						<xs:documentation>The agent types that may appear in the scenarios of this society.</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:sequence>							<xs:element name="agenttype" minOccurs="0" maxOccurs="unbounded">								<xs:annotation>									<xs:documentation>References an agent type that is part of this society by name. Only declared agent types can be used in scenarios. </xs:documentation>								</xs:annotation>								<xs:complexType>									<xs:attribute name="name" type="xs:string" use="required"/>								</xs:complexType>							</xs:element>						</xs:sequence>					</xs:complexType>				</xs:element>				<xs:element name="societytypes" minOccurs="0">					<xs:annotation>						<xs:documentation>The sub-societies of which scenarios may appear in the scenarios of this society.</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:sequence>							<xs:element name="societytype" minOccurs="0" maxOccurs="unbounded">								<xs:annotation>									<xs:documentation>References a sub-society that is part of this society by name. Only scenarios of declared sub-societies can be used in scenarios. </xs:documentation>								</xs:annotation>								<xs:complexType>									<xs:attribute name="name" type="xs:string" use="required"/>								</xs:complexType>							</xs:element>						</xs:sequence>					</xs:complexType>				</xs:element>				<xs:element name="societyinstances">					<xs:annotation>						<xs:documentation>The scenarios (i.e. predefined instances) of this society. Also specifies the name of the default scenario.</xs:documentation>					</xs:annotation>					<xs:complexType>						<xs:sequence>							<xs:element name="societyinstance" maxOccurs="unbounded">								<xs:annotation>									<xs:documentation>The scenario defines the agent instances (as opposed to agent types), and the contained sub-societyinstances, they make up this specific instance of the society. In addition to the agent instances and sub-societies, the dependencies between those elements can be specified. The dependencies are used to determine the order and timing in which the agent instances and sub-scenarios are launched. Also the number of society-instances to start may be specified, using this option a naming-scheme for societyinstances and contained agentinstances may be provided</xs:documentation>								</xs:annotation>								<xs:complexType>									<xs:sequence>										<xs:element name="agentinstances" minOccurs="0">											<xs:annotation>												<xs:documentation>The agent instances that are part of this scenario.</xs:documentation>											</xs:annotation>											<xs:complexType>												<xs:sequence>													<xs:element name="agentinstance" minOccurs="0" maxOccurs="unbounded">														<xs:annotation>															<xs:documentation>Specifies an agent instance for a declared agent type. It requires a name, type and parameter values.</xs:documentation>														</xs:annotation>														<xs:complexType>															<xs:sequence>																<xs:element name="parameter" type="parametervalueType" minOccurs="0" maxOccurs="unbounded">																	<xs:annotation>																		<xs:documentation>The value for the parameter specified by the annotated name.</xs:documentation>																	</xs:annotation>																</xs:element>																<xs:element name="parameterset" type="parametersetType" minOccurs="0" maxOccurs="unbounded">																	<xs:annotation>																		<xs:documentation>Identifies the agent type's parameter for which values are provided. Existing default values will be removed.</xs:documentation>																	</xs:annotation>																</xs:element>																<xs:element name="tooloption" minOccurs="0" maxOccurs="unbounded">																	<xs:annotation>																		<xs:documentation>Allows the registration of this agent with the specified tool.</xs:documentation>																	</xs:annotation>																	<xs:complexType>																		<xs:sequence>																			<xs:element name="property" minOccurs="0" maxOccurs="unbounded">																				<xs:annotation>																					<xs:documentation>Specifies an additional tool-dependant property.  </xs:documentation>																				</xs:annotation>																				<xs:complexType>																					<xs:simpleContent>																						<xs:extension base="xs:string">																							<xs:attribute name="name" type="xs:string" use="required"/>																						</xs:extension>																					</xs:simpleContent>																				</xs:complexType>																			</xs:element>																		</xs:sequence>																		<xs:attribute name="type" use="required">																			<xs:simpleType>																				<xs:restriction base="xs:string">																					<xs:enumeration value="debug"/>																					<xs:enumeration value="sniff"/>																					<xs:enumeration value="log"/>																					<xs:enumeration value="benchmark"/>																					<xs:enumeration value="generic"/>																				</xs:restriction>																			</xs:simpleType>																		</xs:attribute>																		<xs:attribute name="enabled" type="xs:string" use="optional" default='"true"'/>																	</xs:complexType>																</xs:element>																<xs:element name="dependencies" minOccurs="0">																	<xs:annotation>																		<xs:documentation>Specifies a condition that must be met before this agent can be started. Additionally a delay can be stated that defines how long to wait before agent instantiation.</xs:documentation>																	</xs:annotation>																	<xs:complexType>																		<xs:complexContent>																			<xs:extension base="dependencyType"/>																		</xs:complexContent>																	</xs:complexType>																</xs:element>															</xs:sequence>															<xs:attribute name="name" type="xs:IDREF" use="required"/>															<xs:attribute name="type" type="xs:string" use="required"/>															<xs:attribute name="quantity" type="xs:string" use="optional" default='"1"'/>															<xs:attribute name="namingscheme" type="xs:string" use="optional" default='"%N"'/>														</xs:complexType>													</xs:element>												</xs:sequence>											</xs:complexType>										</xs:element>										<xs:element name="societyinstancerefs" minOccurs="0">											<xs:complexType>												<xs:sequence>													<xs:element name="societyinstanceref" minOccurs="0" maxOccurs="unbounded">														<xs:annotation>															<xs:documentation>A sub-scenario that is part of this scenario, referenced by society and scenario name.For remote scenarios a launcher service can be specified.</xs:documentation>														</xs:annotation>														<xs:complexType>															<xs:sequence>																<xs:element name="launcher" type="agentidType" minOccurs="0">																	<xs:annotation>																		<xs:documentation>The launcher that is able to start the specified scenario. Specified as FIPA agent identifier (see FIPA00023).</xs:documentation>																	</xs:annotation>																</xs:element>																<xs:element name="dependencies" type="dependencyType" minOccurs="0">																	<xs:annotation>																		<xs:documentation>Specifies a condition that must be met before this scenario can be launched. Additionally a delay can be stated that defines how long to wait before the scenario initiated.</xs:documentation>																	</xs:annotation>																</xs:element>															</xs:sequence>															<xs:attribute name="name" type="xs:string" use="required"/>															<xs:attribute name="societytype" type="xs:string" use="required"/>															<xs:attribute name="societyinstance" type="xs:string" use="required"/>															<xs:attribute name="quantity" type="xs:string" use="optional" default='"1"'/>															<xs:attribute name="namingscheme" type="xs:string" use="optional"/>														</xs:complexType>													</xs:element>												</xs:sequence>											</xs:complexType>										</xs:element>										<xs:element name="functional" type="functional" minOccurs="0">											<xs:annotation>												<xs:documentation>The functional-tag defines the state 'functional'. A societyinstance is in this state, when all the defined dependencies are fulfilled. If they are not fulfilled, either the 'nonfunctional' or the 'error' state is taken.</xs:documentation>											</xs:annotation>										</xs:element>									</xs:sequence>									<xs:attribute name="name" type="xs:string" use="required"/>									<xs:attribute name="description" type="xs:string" use="optional"/>									<xs:attribute name="quantity" type="xs:string" use="optional" default='"1"'/>									<xs:attribute name="namingscheme" type="xs:string" use="optional" default='"%N"'/>								</xs:complexType>							</xs:element>						</xs:sequence>						<xs:attribute name="default" type="xs:string" use="optional"/>					</xs:complexType>				</xs:element>			</xs:sequence>			<xs:attribute name="name" type="xs:string" use="required"/>			<xs:attribute name="package" type="xs:string" use="optional"/>			<xs:attribute name="description" type="xs:string" use="optional"/>			<xs:attribute name="icon" type="xs:string" use="optional"/>		</xs:complexType>	</xs:element>	<xs:complexType name="agentidType">		<xs:complexContent>			<xs:extension base="referenceType">				<xs:sequence>					<xs:element name="address" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>				</xs:sequence>				<xs:attribute name="name" type="xs:string" use="required"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="servicedescriptionType">		<xs:sequence>			<xs:element name="protocol" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>			<xs:element name="ontology" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>			<xs:element name="language" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>			<xs:element name="property" minOccurs="0" maxOccurs="unbounded">				<xs:complexType>					<xs:simpleContent>						<xs:extension base="xs:string">							<xs:attribute name="name" type="xs:string" use="required"/>						</xs:extension>					</xs:simpleContent>				</xs:complexType>			</xs:element>		</xs:sequence>		<xs:attribute name="name" type="xs:string" use="required"/>		<xs:attribute name="type" type="xs:string" use="required"/>		<xs:attribute name="ownership" type="xs:string" use="optional"/>	</xs:complexType>	<xs:complexType name="dependencyType">		<xs:sequence>			<xs:element name="agenttypedependency" minOccurs="0" maxOccurs="unbounded">				<xs:annotation>					<xs:documentation>A dependency that requires a number of agents of the specified type being available. A quantity "all" indicates that all agents contained in this scenario, which are of the specified type, have to be started before this element.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:attribute name="active" type="xs:string" use="optional" default='"false"'/>					<xs:attribute name="name" type="xs:string" use="required"/>					<xs:attribute name="quantity" type="xs:string" use="optional" default='"1"'/>				</xs:complexType>			</xs:element>			<xs:element name="agentinstancedependency" minOccurs="0" maxOccurs="unbounded">				<xs:annotation>					<xs:documentation>A dependency that requires the specific agent instance as given by the name has to be available. When the status attribute is supplied, the agent has to be in the specified state. For remote agents, a provider can be specified (as FIPA agent identifier), that is queried for the availability of the agent.If the referenced agent is not part of this scenario, it is not automatically started. When a referenced agent is not available, the launcher will wait and re-check the availability from time to time.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:sequence>						<xs:element name="provider" type="agentidType" minOccurs="0">							<xs:annotation>								<xs:documentation>A provider for querying the availability of an agent instance (e.g. agent, AMS, launcher). Specified as FIPA agent identifier (see FIPA00023).</xs:documentation>							</xs:annotation>						</xs:element>					</xs:sequence>					<xs:attribute name="name" type="xs:string" use="required"/>					<xs:attribute name="status" type="xs:string" use="optional" default="functional"/>				</xs:complexType>			</xs:element>			<xs:element name="servicedependency" minOccurs="0" maxOccurs="unbounded">				<xs:annotation>					<xs:documentation>A dependency that requires the specified service as given by the FIPA service description (see FIPA00023) to be available. For remote services, a provider (FIPA directory facilitator) can be specified (as FIPA agent identifier), that is queried for the availability of the service.When a required is not available, the launcher will wait and re-check the availability from time to time.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:sequence>						<xs:element name="servicedescription" type="servicedescriptionType"/>						<xs:element name="provider" type="agentidType" minOccurs="0">							<xs:annotation>								<xs:documentation>A provider for querying the availability of a service (e.g.  directory facilitator). Specified as FIPA agent identifier (see FIPA00023).</xs:documentation>							</xs:annotation>						</xs:element>					</xs:sequence>					<xs:attribute name="active" type="xs:string" use="optional" default='"false"'/>				</xs:complexType>			</xs:element>			<xs:element name="societyinstancedependency" minOccurs="0" maxOccurs="unbounded">				<xs:annotation>					<xs:documentation>A dependency that requires the specific scenario as given by the name has to be available. For remote scenarios, a launcher service can be specified (as FIPA agent identifier), that is queried for the availability of the scenario.If the referenced scenario is not a sub-scenario of this scenario, it is not automatically started. When a referenced scenario is not available, the launcher will wait and re-check the availability from time to time.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:sequence>						<xs:element name="provider" type="agentidType" minOccurs="0">							<xs:annotation>								<xs:documentation>A provider for querying the availability of a scenario (e.g. launcher). Specified as FIPA agent identifier (see FIPA00023).</xs:documentation>							</xs:annotation>						</xs:element>					</xs:sequence>					<xs:attribute name="active" type="xs:string" use="optional" default='"false"'/>					<xs:attribute name="societyinstance" type="xs:string" use="required"/>					<xs:attribute name="societytype" type="xs:string" use="required"/>					<xs:attribute name="status" type="xs:string" use="optional" default='"functional"'/>				</xs:complexType>			</xs:element>			<xs:element name="societytypedependency" minOccurs="0" maxOccurs="unbounded">				<xs:annotation>					<xs:documentation>A dependency that requires a number of societytypes being available. It is hereby sufficient when at least one societyinstance has been started. A quantity "all" indicates that all societyInstances contained in this societytype have to be started before this element.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:attribute name="active" type="xs:string" use="optional" default='"false"'/>					<xs:attribute name="name" type="xs:string" use="required"/>					<xs:attribute name="quantity" type="xs:string" use="optional" default='"1"'/>				</xs:complexType>			</xs:element>			<xs:element name="delaydependency" minOccurs="0" maxOccurs="unbounded">				<xs:annotation>					<xs:documentation>This dependency forces the ASCML to wait a specific amount of milliseconds before going on starting an agent- or societyinstance. This kind of dependency is  evaluated after all other dependencies.</xs:documentation>				</xs:annotation>				<xs:complexType>					<xs:attribute name="quantity" type="xs:string" use="required"/>				</xs:complexType>			</xs:element>		</xs:sequence>	</xs:complexType>	<xs:complexType name="referenceType">		<xs:annotation>			<xs:documentation>Base type for variable elements.</xs:documentation>		</xs:annotation>		<xs:attribute name="reference" type="xs:string" use="optional"/>	</xs:complexType>	<xs:complexType name="parametervalueType" mixed="true">		<xs:complexContent mixed="true">			<xs:extension base="referenceType">				<xs:sequence>					<xs:element name="value" type="xs:string" minOccurs="0"/>				</xs:sequence>				<xs:attribute name="name" type="xs:string" use="required"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="parametersetType">		<xs:complexContent>			<xs:extension base="referenceType">				<xs:sequence>					<xs:element name="value" type="xs:string" minOccurs="0" maxOccurs="unbounded">						<xs:annotation>							<xs:documentation>One value for the specified parameter set.</xs:documentation>						</xs:annotation>					</xs:element>				</xs:sequence>				<xs:attribute name="name" type="xs:string" use="required"/>			</xs:extension>		</xs:complexContent>	</xs:complexType>	<xs:complexType name="functional">		<xs:sequence>			<xs:element name="dependencies" type="dependencyType" minOccurs="0"/>			<xs:element name="invariant" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>		</xs:sequence>	</xs:complexType></xs:schema>
<!--
  <H3>Puzzling agent.</H3>
  
  This agent that plays a board game for one player.
  This example is a Jadex adaption of the original JACK(TM)
  puzzle example and was used for performance comparisons
  between both platforms (cf. readme.txt).
  This version shows how the puzzle works
  with a graphical board and uses a delay
  between the moves. Measurements were done
  with the Benchmark.agent in this package.
-->

<agent xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://jadex.sourceforge.net/jadex.xsd"
	name="Sokrates"
	package="jadex.examples.puzzle">

	<imports>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.*</import>
		<import>java.util.*</import>
	</imports>

	<beliefs>
		<!-- The game board offers possibilities to make moves,
			take back moves and keep track of the game history. -->
		<belief name="board" class="IBoard">
			<fact>new Board()</fact>
 		</belief>
		<!-- The gui of the game board. -->
		<belief name="board_gui" class="BoardGui">
			<fact>new BoardGui($beliefbase.board)</fact>
		</belief>
		<!-- The number of moves already tried. -->
		<belief name="triescnt" class="int">
			<fact>0</fact>
		</belief>
		<!-- The delay in milliseconds between two moves. -->
		<belief name="move_delay" class="long">
			<fact>500</fact>
		</belief>
		<!-- The meta-level strategy for choosing moves
 			(none=choose the first applicable, long=prefer jump moves,
			same_long=prefer long moves of same color, alter_long=prefer
			long move of alternate color. -->
		<belief name="ml" class="String">
			<fact>"same_long"</fact>
		</belief>
	</beliefs>

	<goals>
		<!-- The goal to make a move on the board that is the solution. -->
		<achievegoal name="makemove"
			description="" >
			<parameter name="depth" class="int">
				<value>0</value>
			</parameter>
			<targetcondition>$beliefbase.board.isSolution()</targetcondition>
 		</achievegoal>

		<!-- The meta-level goal for choosing between plans for the makemove goal. -->
		<metagoal name="choosemove">
			<parameter name="event" class="IEvent"/>
			<parameter name="applicables" class="List"/>
			<parameter name="result" class="List" direction="out"/>
			<trigger>
				<goal ref="makemove"/>
			</trigger>
		</metagoal>
	</goals>

	<plans>
		<!-- Start puzzling on the board and measure the needed time. -->
		<plan name="play_game_plan" initial="true">
			<body>new PlayGamePlan()</body>
		</plan>

		<!-- Make a move on the board and create a subgoal for the next move. -->
		<plan name="move_plan">
			<bindings>
				<binding name="move">$beliefbase.board.getPossibleMoves()</binding>
			</bindings>
			<body>new MovePlan($move)</body>
			<trigger>
				<goal ref="makemove"/>
			</trigger>
		</plan>

		<!-- Meta-level plan used to choose among the possible move plans. -->
		<plan name="choose_move_plan">
			<body>new ChooseMovePlan()</body>
			<trigger>
				<goal ref="choosemove"/>
			</trigger>
		</plan>
	</plans>

	<properties>
		<property name="debugging">false</property>
    </properties>
</agent>
<!--
	<H3>Carry agent for carrying ore.</H3>

	This Agent is called by the Production
	Agent to carry the produced ore. Therefore it is registering
	it's carry-servivce at the DF.
-->
<agent xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://jadex.sourceforge.net/jadex.xsd"
	name="Carry"
	package="jadex.examples.marsworld.carrier">

	<imports>
		<import>jadex.examples.marsworld.*</import>
		<import>jadex.examples.marsworld.movement.*</import>
		<import>jadex.examples.marsworld.ontology.*</import>
		<import>jadex.util.jade.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.planlib.*</import>
		<import>jade.core.*</import>
		<import>jade.lang.acl.*</import>
		<import>jade.content.lang.sl.*</import>
	</imports>

	<capabilities>
		<!-- Include the df capability as dfcap for finding other agents
			and registering the carry service. -->
		<capability name="dfcap" file="DF"/>
		<!-- Include the move capability as move for basic movement. -->
		<capability name="move" file="Movement" />
	</capabilities>

	<beliefs>
		<!-- The environment as singleton object. -->
		<belief name="environment" class="Environment">
			<assignto ref="move.environment"/>
			<fact>Environment.getInstance()</fact>
		</belief>

		<!-- The home location. -->
		<belief name="my_home" class="Location">
			<assignto ref="move.my_home"/>
			<fact>$beliefbase.environment.getHomebase().getLocation()</fact>
		</belief>

		<!-- The current location. -->
		<belief name="my_location" class="Location">
			<assignto ref="move.my_location"/>
			<fact>$beliefbase.my_home</fact>
		</belief>

		<!-- The agent type (carry, producer or sentry) -->
		<belief name="my_type" class="String">
			<assignto ref="move.my_type"/>
			<fact>Environment.CARRY_AGENT</fact>
		</belief>

		<!-- The speed. -->
		<belief name="my_speed" class="double">
			<assignto ref="move.my_speed"/>
			<fact>15</fact>
		</belief>

		<!-- Is the mission finished? -->
		<beliefref name="missionend">
			<concrete ref="move.missionend"/>
		</beliefref>

		<!-- The sight radius. -->
		<belief name="my_vision" class="double">
			<assignto ref="move.my_vision"/>
			<fact>0.05</fact>
		</belief>

		<!-- The seen targets. -->
		<beliefsetref name="my_targets">
			<concrete ref="move.my_targets"/>
		</beliefsetref>

		<!-- The ore capacity it can carry. -->
		<belief name="my_capacity" class="int">
			<fact>20</fact>
		</belief>

		<!-- The carried ore amount. -->
		<belief name="ore" class="int">
			<fact>0</fact>
		</belief>

		<!-- The targets sent to the sentries. -->
		<beliefset name="finished_targets" class="Target"/>
	</beliefs>

	<goals>
		<!-- Carry ore home from a target. -->
		<achievegoal name="carry_ore">
			<parameter name="destination" class="Location"/>
			<dropcondition>
				$beliefbase.missionend
			</dropcondition>
			<deliberation>
				<inhibits ref="walk_around"/>
			</deliberation>
		</achievegoal>

		<!-- Just walk around without a target. -->
		<performgoalref name="walk_around">
			<concrete ref="move.walk_around"/>
		</performgoalref>
		<!-- Watch out for targets. -->
		<performgoalref name="watch_targets">
			<concrete ref="move.watch_targets"/>
		</performgoalref>
		<!-- Move to some destination. -->
		<achievegoalref name="move_dest">
			<concrete ref="move.move_dest"/>
		</achievegoalref>

		<!-- Keeping the agent description registered at the df. -->
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered"/>
		</maintaingoalref>
		<!-- Usable for searching other agents. -->
		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>

		<!-- Create a goal for registering and keeping registerd at the df. -->
		<initialgoal ref="df_keep_registered">
			<parameter name="description">
 				<value>"services"</value>
 			</parameter>
			<parameter name="leasetime">
 				<value>200000</value>
 			</parameter>
		</initialgoal>
		<!-- Create a goal for walking around. -->
		<initialgoal ref="walk_around"/>
		<!-- Create a goal for watching for targets. -->
		<initialgoal ref="watch_targets"/>
	</goals>

	<plans>
		<!-- Main service plan that handles action requests. -->
		<plan name="carry" initial="true">
			<body>new CarryPlan()</body>
			<waitqueue>
				<messageevent ref="request_carry"/>
			</waitqueue>
		</plan>

		<!-- Carry home ore. -->
		<plan name="carry_ore">
			<body>new CarryOrePlan()</body>
			<trigger>
				<goal ref="carry_ore"/>
			</trigger>
		</plan>

		<!-- Inform sentries about a new target.-->
		<plan name="informer">
			<body>new InformNewTargetPlan()</body>
			<trigger>
				<condition>
					true
					<affected eventtype="SystemEvent.BSFACT_ADDED" beliefref="my_targets"/>
				</condition>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- Message event for carry ore task allocation. -->
		<messageevent name="request_carry">
			<parameter name="performative" class="int">
				<value>ACLMessage.REQUEST</value>
			</parameter>
			<parameter name="action-class" class="Class">
				<value>RequestCarry.class</value>
			</parameter>
		</messageevent>
	</events>

	<languages>
		<language>new SLCodec(0)</language>
	</languages>
	<ontologies>
		<ontology>MarsOntology.getInstance()</ontology>
	</ontologies>

	<servicedescriptions>
		<!-- The agent offers the service to carry ore. -->
		<servicedescription name="service_carry"
			type='"service_carry"'
			ownership="University of Hamburg"/>
	</servicedescriptions>

	<agentdescriptions>
		<agentdescription name="services">
			<service>service_carry</service>
		</agentdescription>
	</agentdescriptions>

</agent>

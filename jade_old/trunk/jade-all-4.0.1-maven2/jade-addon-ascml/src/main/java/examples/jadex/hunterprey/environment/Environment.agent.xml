<!--
	<H3>Environment Agent for managing the environment object.</H3>
-->
<agent xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://jadex.sourceforge.net/jadex.xsd"
	name="Environment"
	package="jadex.examples.hunterprey.environment">

	<imports>
		<import>jadex.examples.hunterprey.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.util.jade.*</import>
		<import>jadex.*</import>
		<import>jade.core.*</import>
		<import>jade.content.lang.sl.*</import>
		<import>jade.lang.acl.*</import>
		<import>jade.domain.FIPAAgentManagement.*</import>
	</imports>

	<capabilities>
		<capability name="dfcap" file="jadex/planlib/DF.capability.xml"/>
	</capabilities>

	<beliefs>
		<belief name="environment" class="Environment">
			<fact>Environment.getInstance()</fact>
		</belief>
		<belief name="roundtime" class="long">
			<fact>1000</fact>
		</belief>
		<beliefset name="observers" class="Observer" />
	</beliefs>


	<goals>
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered"/>
		</maintaingoalref>
		<!-- initial goals -->
		<initialgoal ref="df_keep_registered">
			<!--<parameter name="df">new jade.core.AID("df@vsispro3:1099/JADE", jade.core.AID.ISGUID)</parameter>
			<parameter name="address">"http://134.100.11.53:1521/acc"</parameter>-->
			<parameter name="description">
 				<value>"services"</value>
 			</parameter>
			<parameter name="leasetime">
 				<value>new Long(20000000)</value>
			</parameter>
		</initialgoal>
	</goals>

	<plans>

		<!-- Dispatch the actual vision to a requester. -->
		<plan name="dispatchvision">
			<body>new DispatchVisionPlan()</body>
			<trigger>
				<messageevent ref="request_vision"/>
			</trigger>
		</plan>

		<!-- Dispatch the world size to a requester. -->
		<plan name="dispatchworldsize">
			<body>new DispatchWorldSizePlan()</body>
			<trigger>
				<messageevent ref="request_worldsize"/>
			</trigger>
		</plan>

		<!-- Inform the requester if a pickup action succeeds. -->
		<plan name="moverequest">
			<body>new MovePlan()</body>
			<trigger>
				<messageevent ref="request_move"/>
			</trigger>
		</plan>

		<!-- Inform the requester if a drop action succeeds. -->
		<plan name="eatrequest">
			<body>new EatPlan()</body>
			<trigger>
				<messageevent ref="request_eat"/>
			</trigger>
		</plan>

		<!-- Simulation plan. -->
		<plan name="simticker" initial="true">
			<body>new SimulationTickerPlan()</body>
		</plan>

		<!-- Create the environment gui. -->
		<plan name="gui" initial="true">
			<body>new GUIPlan()</body>
		</plan>
	</plans>

	<events>
		<messageevent name="request_vision">
			<parameter name="performative" class="int">
				<value>ACLMessage.REQUEST</value>
			</parameter>
			<parameter name="action-class" class="Class">
				<value>RequestVision.class</value>
			</parameter>
		</messageevent>

		<messageevent name="request_worldsize">
			<parameter name="performative" class="int">
				<value>ACLMessage.REQUEST</value>
			</parameter>
			<parameter name="action-class" class="Class">
				<value>RequestWorldSize.class</value>
			</parameter>
		</messageevent>

		<messageevent name="request_move">
			<parameter name="performative" class="int">
				<value>ACLMessage.REQUEST</value>
			</parameter>
			<parameter name="action-class" class="Class">
				<value>RequestMove.class</value>
			</parameter>
		</messageevent>

		<messageevent name="request_eat">
			<parameter name="performative" class="int">
				<value>ACLMessage.REQUEST</value>
			</parameter>
			<parameter name="action-class" class="Class">
				<value>RequestEat.class</value>
			</parameter>
		</messageevent>
	</events>

	<languages>
		<language>new SLCodec(0)</language>
	</languages>
	<ontologies>
		<ontology>HunterPreyOntology.getInstance()</ontology>
	</ontologies>

	<expressions>
		<condition name="emptylist">
			$beliefbase.environment.getTaskSize()==0
		</condition>
	</expressions>

	<servicedescriptions>
		<servicedescription name="environment-service"
			type='"hunter-prey environment"'
			ownership="University of Hamburg">
			<language>fipa-sl0</language>
			<ontology>hunterprey</ontology>
			<protocol>fipa-request</protocol>
		</servicedescription>
	</servicedescriptions>

	<agentdescriptions>
		<agentdescription name="services">
			<service>environment-service</service>
		</agentdescription>
	</agentdescriptions>

</agent>

